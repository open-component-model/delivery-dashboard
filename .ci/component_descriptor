#!/usr/bin/env python3

import dataclasses
import os

import yaml

import ci.util
import ocm


component_descriptor_base_path = os.path.abspath(os.environ['BASE_DEFINITION_PATH'])
component_descriptor_path = os.path.abspath(os.environ['COMPONENT_DESCRIPTOR_PATH'])

own_dir = os.path.abspath(os.path.dirname(__file__))
repo_dir = os.path.abspath(os.path.join(own_dir, os.pardir))
BUSYBOX_VERSIONFILE = os.path.join(repo_dir, 'VERSION_BUSYBOX')


def parse_component_descriptor():
    component_descriptor = ocm.ComponentDescriptor.from_dict(
        component_descriptor_dict=ci.util.parse_yaml_file(component_descriptor_base_path),
    )
    return component_descriptor


def version_from_file(
    version_file_path: str,
) -> str:
    with open(version_file_path) as version_file:
        version = version_file.read().strip()
    return version


if __name__ == '__main__':

    component_descriptor = parse_component_descriptor()
    component = component_descriptor.component

    busybox_version = version_from_file(BUSYBOX_VERSIONFILE)
    busybox_resource = ocm.Resource(
        name='busybox',
        version=busybox_version,
        type=ocm.ArtefactType.OCI_IMAGE,
        access=ocm.OciAccess(
            imageReference=f'europe-docker.pkg.dev/gardener-project/releases/ocm-gear/busybox:{busybox_version}',
        ),
        relation=ocm.ResourceRelation.EXTERNAL,
    )

    component.resources.append(busybox_resource)

    with open(component_descriptor_path, 'w') as f:
        yaml.dump(
            data=dataclasses.asdict(component_descriptor),
            Dumper=ocm.EnumValueYamlDumper,
            stream=f,
        )
