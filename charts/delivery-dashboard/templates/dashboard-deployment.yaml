{{- $podName := "delivery-dashboard" }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $podName }}
  namespace: {{ .Values.target_namespace | default .Release.Namespace }}
spec:
  replicas: {{ default 1 .Values.replicas }}
  selector:
    matchLabels:
      app: {{ $podName }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      {{- if default dict (.Values.pod).annotations }}
      annotations:
      {{- range $annotation, $value := .Values.pod.annotations }}
        {{ $annotation }}: {{ $value }}
      {{- end }}
      {{- end }}
      labels:
        app: {{ $podName }}
      {{- if default dict (.Values.pod).labels }}
      {{- range $annotation, $value := .Values.pod.labels }}
        {{ $annotation }}: {{ $value }}
      {{- end }}
      {{- end }}
    spec:
      initContainers:
        - name: init-config-volume
          image: {{ include "image" .Values.busybox.image }}
          command: # write all env-vars starting with REACT into config.js
            - sh
            - -c
            - |
              touch /delivery-dashboard/config.js;
              for var in $(env | grep ^REACT); do
                key=${var%%=*};
                value=${var#*=*};
                echo "window.$key = '$value'" >> /delivery-dashboard/dynamic/config.js;
              done
              cat /delivery-dashboard/config.js;
          securityContext:
            allowPrivilegeEscalation: false
          {{- if default dict .Values.envVars }}
          env:
          {{- range $key, $value := .Values.envVars }}
          - name: {{ $key }}
            value: {{ $value }}
          {{- end }}
          {{- end }}
          volumeMounts:
            - name: delivery-dashboard-config
              mountPath: /delivery-dashboard/dynamic
      containers:
        - name: {{ $podName }}
          image: {{ include "image" .Values.image }}
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
          ports:
            - containerPort: {{ default 8080 .Values.containerPort }}
              name: default
          volumeMounts:
            - name: delivery-dashboard-config
              mountPath: /delivery-dashboard/dynamic
          resources:
            requests:
              memory: 10Mi
              cpu: 10m
            limits:
              memory: 100Mi
              cpu: 100m
      volumes:
      - name: delivery-dashboard-config
        emptyDir: {}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-to-delivery-dashboard
  namespace: {{ .Values.target_namespace | default .Release.Namespace }}
spec:
  podSelector:
    matchLabels:
      app: {{ $podName }}
  policyTypes:
    - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 8080
