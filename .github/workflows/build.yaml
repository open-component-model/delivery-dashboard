name: Build

on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
        description:
          mode as expected by `cc-utils/.github/workflows/prepare`
          either of
          - snapshot
          - release

jobs:
  prepare:
    uses: gardener/cc-utils/.github/workflows/prepare.yaml@master
    with:
      mode: ${{ inputs.mode }}

  odg-extension-definitions:
    runs-on: ubuntu-latest
    needs:
    - prepare
    steps:
    - uses: actions/checkout@v4
    - name: Export odg-extension-definitions
      run: |
        export version=${{ needs.prepare.outputs.version }}
        blobs_dir=blobs.d
        mkdir $blobs_dir
        extension_definitions="extension-definitions.yaml"

        yq -i '
          .installation.ocm_references[].version = strenv(version) |
          .installation.ocm_references[].artefact.version = strenv(version) |
          .installation.ocm_references[].mappings[].version = strenv(version)
        ' ${extension_definitions}

        tar czf ${blobs_dir}/extension_definitions.tar.gz ${extension_definitions}

    - uses: gardener/cc-utils/.github/actions/export-ocm-fragments@master
      with:
        ocm-resources: |
          name: odg-extension-definitions
          type: odg-extension
          relation: local
          access:
            type: localBlob
            localReference: extension_definitions.tar.gz
        blobs-directory: blobs.d

  lint:
    runs-on: ubuntu-latest
    needs:
      - prepare
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Run ESLint
        run: |
          .ci/lint

      - name: Run ESLint (SAST) and collect evidence
        run: |
          set -euo pipefail
          blobs_dir=blobs.d
          mkdir -p $blobs_dir
          eslint_logfile=eslint-sast.log
          eslint_evidence="${blobs_dir}/eslint-sast.tar.gz"

          .ci/lint eslint.sast.config.mjs 2>&1 | tee $eslint_logfile

          tar czf $eslint_evidence $eslint_logfile eslint.sast.config.mjs

      - name: Export ESLint SAST evidence to component descriptor
        uses: gardener/cc-utils/.github/actions/export-ocm-fragments@master
        with:
          blobs-directory: blobs.d
          ocm-resources: |
            name: sast-linting-evidence
            relation: local
            access:
              type: localBlob
              localReference: eslint-sast.tar.gz
            labels:
              - name: gardener.cloud/purposes
                value:
                  - lint
                  - sast
                  - eslint

              - name: gardener.cloud/comment
                value: |
                  we use eslint with "eslint-plugin-security" for SAST scans
                  see: https://github.com/eslint-community/eslint-plugin-security

  oci-image:
    name: Build OCI Image
    needs:
      - prepare
    permissions:
      contents: read
      packages: write
      id-token: write
    uses: gardener/cc-utils/.github/workflows/oci-ocm.yaml@master
    with:
      name: delivery-dashboard
      version: ${{ needs.prepare.outputs.version }}
      oci-registry: ${{ needs.prepare.outputs.oci-registry }}
      oci-repository: odg/delivery-dashboard
      dockerfile: Dockerfile
      ctx: oci-images
      oci-platforms: linux/amd64,linux/arm64
      ocm-labels: |
        name: gardener.cloud/cve-categorisation
        value:
          network_exposure: public
          authentication_enforced: false
          user_interaction: end-user
          confidentiality_requirement: none
          integrity_requirement: high
          availability_requirement: high
      prebuild-hook: |
        sed -i "s/REACT_APP_BUILD_VERSION=.*/REACT_APP_BUILD_VERSION='${{ needs.prepare.outputs.version }}'/" .env.production

  helmchart:
    name: Build Helmchart
    needs:
      - prepare
      - oci-image
    permissions:
      contents: read
      packages: write
      id-token: write
    uses: gardener/cc-utils/.github/workflows/helmchart-ocm.yaml@master
    with:
      name: delivery-dashboard
      dir: charts/delivery-dashboard
      oci-registry: ${{ needs.prepare.outputs.oci-registry }}
      oci-repository: charts/odg
      ocm-mappings: |
        - ref: ocm-resource:delivery-dashboard.repository
          attribute: image.repository
        - ref: ocm-resource:delivery-dashboard.tag
          attribute: image.tag
        - ref: ocm-resource:busybox.repository
          attribute: busybox.image.repository
        - ref: ocm-resource:busybox.tag
          attribute: busybox.image.tag
